{"version":3,"sources":["../../../../../Advanced/JS/ExamPrep26Apr2018/03.LineManager/LineManager.js"],"names":["LineManager","constructor","busStops","currentStop","delay","totalDuration","atDepot","_busStops","length","nextStopName","name","currentDelay","value","i","timeToNext","Error","arriveAtStop","minutes","toString","line","man","console","log","wrong"],"mappings":";;;AAAA,UAAMA,WAAN,CAAkB;AACdC,oBAAYC,QAAZ,EAAsB;AAClB,iBAAKA,QAAL,GAAgBA,QAAhB;AACA,iBAAKC,WAAL,GAAmB,CAAnB;AACA,iBAAKC,KAAL,GAAa,CAAb;AACA,iBAAKC,aAAL,GAAqB,CAArB;AACH;;AAED,YAAIC,OAAJ,GAAc;AACV,mBAAO,KAAKH,WAAL,KAAqB,KAAKI,SAAL,CAAeC,MAAf,GAAwB,CAApD;AACH;;AAED,YAAIC,YAAJ,GAAmB;AACf,gBAAI,KAAKH,OAAT,EAAkB;AACd,uBAAO,WAAP;AACH;AACD,mBAAO,KAAKC,SAAL,CAAe,KAAKJ,WAAL,GAAmB,CAAlC,EAAqCO,IAA5C;AACH;;AAED,YAAIC,YAAJ,GAAmB;AACf,mBAAO,KAAKP,KAAZ;AACH;;AAED,YAAIF,QAAJ,CAAaU,KAAb,EAAoB;AAChB,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAAMJ,MAA1B,EAAkCK,GAAlC,EAAuC;AACnC,oBAAI,OAAOD,MAAMC,CAAN,EAASH,IAAhB,KAAyB,QAAzB,IAAqC,OAAOE,MAAMC,CAAN,EAASC,UAAhB,KAA+B,QAApE,IACAF,MAAMC,CAAN,EAASH,IAAT,KAAkB,EADlB,IACwBE,MAAMC,CAAN,EAASC,UAAT,GAAsB,CADlD,EACqD;AACjD,0BAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACH;AACJ;AACD,iBAAKR,SAAL,GAAiBK,KAAjB;AACH;;AAEDI,qBAAaC,OAAb,EAAsB;AAClB,gBAAIA,UAAU,CAAV,IAAe,KAAKX,OAAxB,EAAiC;AAC7B,sBAAM,IAAIS,KAAJ,CAAU,EAAV,CAAN;AACH;AACD,iBAAKV,aAAL,IAAsBY,OAAtB;AACA,iBAAKb,KAAL,IAAca,UAAU,KAAKV,SAAL,CAAe,KAAKJ,WAApB,EAAiCW,UAAzD;AACA,iBAAKX,WAAL;AACA,mBAAO,CAAC,KAAKG,OAAb;AACH;;AAEDY,mBAAW;AACP,gBAAIC,OAAO,KAAKb,OAAL,GAAe,sBAAf,GAAyC,gBAAe,KAAKC,SAAL,CAAe,KAAKJ,WAAL,GAAmB,CAAlC,EAAqCO,IAAK,IAA7G;AACA,mBAAO,mBACHS,IADG,GAEF,oBAAmB,KAAKhB,WAAY,IAFlC,GAGF,qBAAoB,KAAKE,aAAc,YAHrC,GAIF,YAAW,KAAKD,KAAM,UAJ3B;AAKH;AAlDa;;AAqDlB;AACA,UAAMgB,MAAM,IAAIpB,WAAJ,CAAgB,CACxB,EAACU,MAAM,OAAP,EAAgBI,YAAY,CAA5B,EADwB,EAExB,EAACJ,MAAM,kBAAP,EAA2BI,YAAY,CAAvC,EAFwB,EAGxB,EAACJ,MAAM,UAAP,EAAmBI,YAAY,CAA/B,EAHwB,EAIxB,EAACJ,MAAM,WAAP,EAAoBI,YAAY,CAAhC,EAJwB,EAKxB,EAACJ,MAAM,UAAP,EAAmBI,YAAY,CAA/B,EALwB,EAMxB,EAACJ,MAAM,OAAP,EAAgBI,YAAY,CAA5B,EANwB,CAAhB,CAAZ;;AASA;AACA,WAAMM,IAAId,OAAJ,KAAgB,KAAtB,EAA6B;AACzBe,gBAAQC,GAAR,CAAYF,IAAIF,QAAJ,EAAZ;AACAE,YAAIJ,YAAJ,CAAiB,CAAjB;AACH;;AAEDK,YAAQC,GAAR,CAAYF,IAAIF,QAAJ,EAAZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAMK,QAAQ,IAAIvB,WAAJ,CAAgB,CAC1B,EAAEU,MAAM,MAAR,EAAgBI,YAAY,EAAES,OAAO,oBAAT,EAA5B,EAD0B,CAAhB,CAAd","file":"LineManager.js","sourcesContent":["class LineManager {\r\n    constructor(busStops) {\r\n        this.busStops = busStops\r\n        this.currentStop = 0\r\n        this.delay = 0\r\n        this.totalDuration = 0\r\n    }\r\n\r\n    get atDepot() {\r\n        return this.currentStop === this._busStops.length - 1\r\n    }\r\n\r\n    get nextStopName() {\r\n        if (this.atDepot) {\r\n            return 'At depot.'\r\n        }\r\n        return this._busStops[this.currentStop + 1].name\r\n    }\r\n\r\n    get currentDelay() {\r\n        return this.delay\r\n    }\r\n\r\n    set busStops(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (typeof value[i].name !== 'string' || typeof value[i].timeToNext !== 'number' ||\r\n                value[i].name === '' || value[i].timeToNext < 0) {\r\n                throw new Error('Invalid data')\r\n            }\r\n        }\r\n        this._busStops = value;\r\n    }\r\n\r\n    arriveAtStop(minutes) {\r\n        if (minutes < 0 || this.atDepot) {\r\n            throw new Error('')\r\n        }\r\n        this.totalDuration += minutes\r\n        this.delay += minutes - this._busStops[this.currentStop].timeToNext\r\n        this.currentStop++\r\n        return !this.atDepot\r\n    }\r\n\r\n    toString() {\r\n        let line = this.atDepot ? '- Course completed\\n' : `- Next stop: ${this._busStops[this.currentStop + 1].name}\\n`\r\n        return 'Line summary\\n' +\r\n            line +\r\n            `- Stops covered: ${this.currentStop}\\n` +\r\n            `- Time on course: ${this.totalDuration} minutes\\n` +\r\n            `- Delay: ${this.delay} minutes`\r\n    }\r\n}\r\n\r\n// Initialize a line manager with correct values\r\nconst man = new LineManager([\r\n    {name: 'Depot', timeToNext: 4},\r\n    {name: 'Romanian Embassy', timeToNext: 2},\r\n    {name: 'TV Tower', timeToNext: 3},\r\n    {name: 'Interpred', timeToNext: 4},\r\n    {name: 'Dianabad', timeToNext: 2},\r\n    {name: 'Depot', timeToNext: 0},\r\n]);\r\n\r\n// Travel through all the stops until the bus is at depot\r\nwhile(man.atDepot === false) {\r\n    console.log(man.toString());\r\n    man.arriveAtStop(4);\r\n}\r\n\r\nconsole.log(man.toString());\r\n\r\n//Should throw an Error (minutes cannot be negative)\r\n//man.arriveAtStop(-4);\r\n// Should throw an Error (last stop reached)\r\n//man.arriveAtStop(4);\r\n\r\n// Should throw an Error at initialization\r\nconst wrong = new LineManager([\r\n    { name: 'Stop', timeToNext: { wrong: 'Should be a number'} }\r\n]);"]}