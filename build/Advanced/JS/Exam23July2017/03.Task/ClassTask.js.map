{"version":3,"sources":["../../../../../Advanced/JS/Exam23July2017/03.Task/ClassTask.js"],"names":["Task","constructor","title","deadLine","deadline","status","isOverdue","_status","val","_deadLine","now","Date","Error","_title","value","comparator","a","b","statusRank","undefined","Object","defineProperty","configurable","enumerable","writable","rankA","rankB","getIcon","toString","date1","setDate","getDate","task1","date2","setFullYear","getFullYear","task2","date3","task3","task4","task5","tasks","console","log","join"],"mappings":"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","file":"ClassTask.js","sourcesContent":["class Task {\r\n    constructor(title, deadLine) {\r\n        this.title = title;\r\n        this.deadline = deadLine;\r\n        this.status;\r\n        this.isOverdue;\r\n    }\r\n\r\n    get status(){\r\n        return this._status;\r\n    }\r\n    set status(val){\r\n        this._status = val;\r\n    }\r\n\r\n    get deadline (){\r\n        return this._deadLine;\r\n    }\r\n\r\n    set deadline (val){\r\n        let now = Date.now();\r\n        if (val < now) {\r\n            throw new Error(\"The deadLine must be after today\")\r\n        }\r\n        this._deadLine = val;\r\n        this.status = \"Open\";\r\n    }\r\n\r\n    get isOverdue(){\r\n        let now = Date.now();\r\n        return this.status !== \"Completed\" && this.deadLine < now;\r\n    }\r\n\r\n    get title() {\r\n        return this._title;\r\n    }\r\n\r\n    set title(value) {\r\n        this._title = value;\r\n    }\r\n\r\n    static comparator(a, b) {\r\n        if (Task.statusRank === undefined) {\r\n            Object.defineProperty(Task, 'statusRank', {\r\n                value: {\r\n                    'Open': 2,\r\n                    'In Progress': 1,\r\n                    'Complete': 3\r\n                },\r\n                configurable: false,\r\n                enumerable: false,\r\n                writable: false\r\n            });\r\n        }\r\n        let rankA = a.isOverdue ? 0 : Task.statusRank[a.status];\r\n        let rankB = b.isOverdue ? 0 : Task.statusRank[b.status];\r\n        if (rankA - rankB !== 0) {\r\n            return rankA - rankB;\r\n        }\r\n        return a.deadline - b.deadline;\r\n    }\r\n\r\n    getIcon() {\r\n\r\n        if (this.isOverdue) {\r\n            return \"\\u26A0\";\r\n        }\r\n        switch (this.status) {\r\n            case \"Open\":\r\n                return \"\\u2731\";\r\n            case \"In Progress\":\r\n                return \"\\u219D\";\r\n            case \"Complete\":\r\n                return \"\\u2714\";\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.status === \"Complete\") {\r\n            return `[${this.getIcon()}] ${this.title}`\r\n        } else if (this.isOverdue) {\r\n            return `[${this.getIcon()}] ${this.title} (overdue)`\r\n        }\r\n        return `[${this.getIcon()}] ${this.title} (deadline: ${this.deadLine})`\r\n    }\r\n}\r\n\r\n\r\nlet date1 = new Date();\r\ndate1.setDate(date1.getDate() + 7); // Set date 7 days from now\r\nlet task1 = new Task('JS Homework', date1);\r\nlet date2 = new Date();\r\ndate2.setFullYear(date2.getFullYear() + 1); // Set date 1 year from now\r\nlet task2 = new Task('Start career', date2);\r\n//console.log(task1 + '\\n' + task2);\r\nlet date3 = new Date();\r\ndate3.setDate(date3.getDate() + 3); // Set date 3 days from now\r\nlet task3 = new Task('football', date3);\r\n// Create two tasks with deadline set to current time\r\nlet task4 = new Task('Task 4', new Date());\r\nlet task5 = new Task('Task 5', new Date());\r\ntask1.status = 'In Progress';\r\ntask3.status = 'In Progress';\r\ntask5.status = \"Complete\";\r\nlet tasks = [task1, task2, task3, task4, task5];\r\n// setTimeout(() => {\r\n//     tasks.sort(Task.comparator);\r\n//     console.log(tasks.join('\\n'));\r\n// }, 1000); // Sort and print one second later\r\n//\r\n// should throw an Error\r\n//let overdueTask = new Task('Overdue Task', new Date(2005, '4', '20'));\r\n// // should throw an Error\r\n//task1.deadline = new Date(2005, '4', '20');\r\nconsole.log(tasks.join('\\n'));\r\n"]}