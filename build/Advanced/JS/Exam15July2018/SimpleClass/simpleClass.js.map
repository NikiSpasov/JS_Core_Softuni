{"version":3,"sources":["../../../../../Advanced/JS/Exam15July2018/SimpleClass/simpleClass.js"],"names":["BookCollection","constructor","shelfGenre","room","capacity","validateRoom","shelf","shelfCapacity","Error","shelfCondition","length","shaveIsFull","addBook","bookName","bookAuthor","genre","currentBook","shift","push","throwAwayBook","searchedBook","filter","b","delete","showBooks","sortedShelf","sort","a","localeCompare","result","book","toString","bedRoom","console","log"],"mappings":"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","file":"simpleClass.js","sourcesContent":["class BookCollection  {\r\n    constructor(shelfGenre, room, capacity){\r\n        this.validateRoom(room);\r\n        this.room = room;\r\n        this.shelfGenre = shelfGenre;\r\n        this.shelf = [];\r\n        this.shelfCapacity = capacity;\r\n\r\n    }\r\n\r\n    validateRoom(room){\r\n        if (room !== \"livingRoom\" && room !== \"bedRoom\" && room !== \"closet\" ) {\r\n            throw new Error(`Cannot have book shelf in ${room}`)\r\n        }\r\n    }\r\n\r\n    get shelfCondition(){\r\n        return this.shelfCapacity - this.shelf.length;\r\n    }\r\n\r\n    shaveIsFull(){\r\n            return this.shelfCondition === 0\r\n    }\r\n\r\n    addBook(bookName, bookAuthor, genre) {\r\n        let currentBook = {\r\n            bookName,\r\n            bookAuthor,\r\n            genre\r\n        };\r\n        if (this.shelfCondition === 0) {\r\n            this.shelf.shift();\r\n        }\r\n        this.shelf.push(currentBook);\r\n    }\r\n\r\n    throwAwayBook(bookName){\r\n        if (this.shelfCondition() === 0) {\r\n            let searchedBook = this.shelf.filter(b =>b.bookName === bookName)[0];\r\n            this.shelf.delete(searchedBook);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    showBooks(genre){\r\n        let searchedBook = this.shelf.filter(b =>b.genre === genre);\r\n        let sortedShelf = searchedBook.sort((a,b) => a.bookAuthor.localeCompare(b.bookAuthor));\r\n        let result =`Results for search \"${genre}\":`;\r\n        for (let book of sortedShelf) {\r\n            result += `\\n\\uD83D\\uDCD6 ${book.bookAuthor} – \"${book.bookName}\"`\r\n        }\r\n        return result;\r\n    }\r\n\r\n    toString(){\r\n        if (this.shelf.length === 0) {\r\n            return \"It's an empty shelf\";\r\n        }\r\n        let result = `${this.shelfGenre} shelf in {room} contains:`;\r\n\r\n        let sortedShelf = this.shelf.sort((a,b) => a.bookAuthor.localeCompare(b.bookAuthor));\r\n\r\n        for (let book of sortedShelf) {\r\n            result += `\\n\\uD83D\\uDCD6 \"${book.bookName}\" – ${book.bookAuthor}`\r\n        }\r\n        return result;\r\n    }\r\n}\r\nlet bedRoom = new BookCollection('Mixed', 'bedRoom', 5);\r\nbedRoom.addBook(\"John Adams\", \"David McCullough\", \"history\");\r\nbedRoom.addBook(\"The Guns of August\", \"Cuentos para pensar\", \"history\");\r\nbedRoom.addBook(\"Atlas of Remote Islands\", \"Judith Schalansky\");\r\nbedRoom.addBook(\"Paddle-to-the-Sea\", \"Holling Clancy Holling\");\r\n\r\nconsole.log(\"Shelf's capacity: \" + bedRoom.shelfCondition);\r\nconsole.log(bedRoom.showBooks(\"history\"));\r\n\r\n\r\n\r\n"]}